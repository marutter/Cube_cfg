[include shell_command.cfg]
[include fluidd.cfg]
[virtual_sdcard]
path: /home/mrutter/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

# This file contains common pin mappings for the BIGTREETECH SKR V1.4
# board. To use this config, the firmware should be compiled for the
# LPC1768 or LPC1769(Turbo).

# See docs/Config_Reference.md for a description of parameters.
[include sfs2.cfg]
[include mainsail.cfg]
[stepper_y]
step_pin: P0.19
dir_pin: !P0.20
enable_pin: !P2.8
microsteps: 16
rotation_distance: 32
full_steps_per_rotation: 400
endstop_pin: !P1.29
position_endstop: 300
position_min: 0
position_max: 308
homing_speed: 50
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: P1.9
run_current: 1.4
hold_current: 0.84
stealthchop_threshold: 999999

[stepper_x]
step_pin: P2.2
dir_pin: !P2.6
enable_pin: !P2.1
microsteps: 16
rotation_distance: 32
full_steps_per_rotation: 400
endstop_pin: !P1.28
position_endstop: -20
position_max: 292
position_min: -20
homing_speed: 50
homing_retract_dist: 0
homing_positive_dir: false 

[tmc2209 stepper_x]
uart_pin: P1.10
run_current: 1.4
hold_current: 0.84
stealthchop_threshold: 999999 


[stepper_z]
step_pin: P0.22
dir_pin: !P2.11
enable_pin: !P0.21
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 250
position_min: -10

[tmc2209 stepper_z]
uart_pin: P1.8
interpolate: True
run_current: 0.750
hold_current: 0.450
stealthchop_threshold: 999999

[stepper_z1]
microsteps: 16
step_pin: P1.15
dir_pin: !P1.14
enable_pin: !P1.16
rotation_distance: 8

[tmc2209 stepper_z1]
uart_pin: P1.1
interpolate: True
run_current: 0.750
hold_current: 0.450
stealthchop_threshold: 999999 

[bltouch]
sensor_pin: ^P0.10
control_pin: P2.0
x_offset: 28
y_offset: 6
#z_offset: 2.350
pin_move_time: 1
pin_up_touch_mode_reports_triggered: False
probe_with_touch_mode: True

[safe_z_home]
home_xy_position: 150,170
speed: 50
z_hop: 10
z_hop_speed: 5

[extruder]
step_pin: P2.13
dir_pin: P0.11
enable_pin: !P2.12
microsteps: 16
rotation_distance: 7.72
full_steps_per_rotation: 200
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: P2.7
sensor_type: EPCOS 100K B57560G104F
sensor_pin: P0.24
pressure_advance: .05
#control: pid
#pid_Kp: 22.2
#pid_Ki: 1.08
#pid_Kd: 114
max_extrude_cross_section: 50 # default 0.640
max_extrude_only_distance: 300
min_temp: 0
max_temp: 260
#min_extrude_temp: 10

[tmc2209 extruder]
uart_pin: P1.4
run_current: 1.3
hold_current: 0.84
# https://github.com/KevinOConnor/klipper/issues/1363
stealthchop_threshold: 5000

[heater_bed]
heater_pin: P2.5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: P0.25
#control: pid
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 130

[fan]
pin: P2.3

[mcu]
baud: 250000
serial: /dev/serial/by-id/usb-Klipper_lpc1769_1F500316E910D595CC1ADB61C32000F5-if00

[bed_screws]
screw1: 25,25
screw2: 275,25
screw3: 25,275
screw4: 275,275

[printer]
kinematics: corexy
max_velocity: 200
max_accel: 1000
max_z_velocity: 25
max_z_accel: 30

[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

[exclude_object]

########################################
# BED LEVELING
########################################

#[gcode_macro G29]
#gcode:
#    BED_MESH_CALIBRATE

[bed_mesh]
mesh_min: 20,20
mesh_max: 290,290
speed: 150
horizontal_move_z: 5
probe_count: 5,5
fade_start: 1.0
fade_end: 10.0
split_delta_z: .01
move_check_distance: 3
mesh_pps: 2,2
algorithm: bicubic

[gcode_macro G32]
gcode:
      G28
      Z_TILT_ADJUST

[z_tilt]
z_positions: -44,160
             391,160
points: 1,150
        260,150
speed: 150
horizontal_move_z: 7
retries: 6
retry_tolerance: 0.025

#########################################
########## ADAPTIVE BED MESH ############
#########################################
# Written by Frix_x#0161 #
# @version: 3.0

# CHANGELOG:
#   v3.0: - added the use of [exclude_object] tags to extract the first layer bounding box (many thanks to Kyleisah for the excellent idea and inspiration)
#           the macro is still fully compatible with the old way using the SIZE parameter: it will use it if specified, or else
#           fallback to the [exclude_object] method and if both are not available, it will do a full and normal bed mesh as usual.
#         - also added a FORCE_MESH parameter to mesh even for very small parts
#         - removed the RRI that was always added put in the BED_MESH_CALIBRATE call. Now it's added only when there is one defined in the [bed_mesh] section
#   v2.3: moved the install notes into a proper markdown file in: doc > features > adaptive_bed_mesh.md
#   v2.2: removed the requirement to set mesh_pps in the [bed_mesh] section. It's now again optional as it should be
#   v2.1: fix for the nominal mesh (when no SIZE parameter is used or SIZE=0_0_0_0)
#   v2.0: split in multple macros to be able to use the center point in the z calibration bed probing position before doing the mesh
#   v1.1: fix for a bug when parsing string when using uppercase letters in the [bed_mesh] section
#   v1.0: first adaptive bed mesh macro

# -------------------------------------------------------------------------------------------------------------------------
# If you want to use it into your own config, please install it as a standalone macro as described in the
# installation section of this file: doc > features > adaptive_bed_mesh.md
# -------------------------------------------------------------------------------------------------------------------------

### What is it ? ###
# The adaptive bed mesh is simple: it's a normal bed mesh, but only "where" and "when" it's necessary.
# Sometime I print small parts, sometime I print full plates and I like to get a precise bed_mesh (like 9x9 or more). However, it take a
# lot of time and it's useless to probe all the plate for only a 5cm² part. So this is where the adaptive bed mesh is helping:
# 1. It get the corners coordinates of the fisrt layer surface either from the slicer or the [exclude_object] tags
# 2. It compute a new set of points to probe on this new zone to get at least the same precision as your standard bed mesh. For example, if
#    a normal bed mesh is set to 9x9 for 300mm², it will then compute 3x3 for a 100mm² surface. Also if for whatever reason your parts are in
#    the corner of the build plate (like for a damaged PEI in the center), it will follow them to probe this exact area.
# 3. As the probed points computed are odd, it will also compute the new relative reference index point in the center of the zone and save
#    the coordinates of this point to use them somwhere else (like the probed point of the auto z calibration plugin for example).
# 4. To go further, it will not do any bed_mesh if there is less than 3x3 points to probe (very small part alone) and choose/change the
#    algorithm (bicubic/lagrange) depending of the size and shape of the mesh computed (like 3x3 vs 3x9)

# Feel free to ping me on Discord (Frix_x#0161) if you need help or have any comments to improve it :)


# ===========================================================================================================
# DO NOT MODIFY THOSE VARIABLES (they are used internaly by the adaptive bed mesh macro)
[gcode_macro _ADAPTIVE_MESH_VARIABLES]
variable_ready: False
variable_do_mesh: False
variable_do_nominal: False
variable_mesh_min: 0,0
variable_mesh_max: 0,0
variable_mesh_center: 0,0
variable_probe_count: 0,0
variable_rri: 0
variable_algo: "bicubic"
gcode:


[gcode_macro COMPUTE_MESH_PARAMETERS]
description: Compute the mesh parameters and store them for later use
gcode:
    # 1 ----- GET ORIGINAL BEDMESH PARAMS FROM CONFIG ----------------------
    {% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
    {% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
    {% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
    {% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
    {% set xMeshPPS, yMeshPPS = (printer["configfile"].config["bed_mesh"]["mesh_pps"]|default('2,2')).split(',')|map('trim')|map('int') %}

    {% set margin = params.MARGIN|default(5)|int %} # additional margin to mesh around the first layer
    {% set force_mesh = params.FORCE_MESH|default(False) %} # force the mesh even if it's a small part (ie. computed less than 3x3)


    # 2 ----- GET FIRST LAYER COORDINATES and SIZE -------------------------------------
    # If the SIZE parameter is defined and not a dummy placeholder, we use it to do the adaptive bed mesh logic
    RESPOND MSG="Here we go"
    RESPOND MSG="{params.SIZE}"
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
       RESPOND MSG="{params.SIZE} is good"
    {% endif %}
    
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
        RESPOND MSG="Got a SIZE parameter for the adaptive bed mesh"
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
    
    {% elif printer.exclude_object.objects %}
        # Else if SIZE is not defined, we fallback to use the [exclude_object] tags
        # This method is derived from Kyleisah KAMP repository: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging)
        RESPOND MSG="No SIZE parameter, using the [exclude_object] tags for the adaptive bed mesh"
        {% set eo_points = printer.exclude_object.objects|map(attribute='polygon')|sum(start=[]) %}
        {% set xMinSpec = eo_points|map(attribute=0)|min %}
        {% set yMinSpec = eo_points|map(attribute=1)|min %}
        {% set xMaxSpec = eo_points|map(attribute=0)|max %}
        {% set yMaxSpec = eo_points|map(attribute=1)|max %}
    
    {% else %}
        # Else if no SIZE parameter and no [exclude_object] tags, then we want to do a nominal bed mesh
        # so nothing to do here...
        RESPOND MSG="No info about the first layer coordinates, doing a nominal bed mesh instead of adaptive"
    {% endif %}


    # If the first layer size was correctly retrieved, we can do the adaptive bed mesh logic, else we
    # fallback to the original and nominal BED_MESH_CALIBRATE function (full bed probing)
    {% if xMinSpec and yMinSpec and xMaxSpec and yMaxSpec %}

        # 3 ----- APPLY MARGINS ----------------------------------------------
        # We use min/max function as we want it to be constrained by the original
        # bedmesh size. This will avoid going outside the machine limits
        {% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
        {% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
        {% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
        {% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}

        # 4 ----- COMPUTE A NEW PROBE COUNT ----------------------------------
        # The goal is to have at least the same precision as from the config. So we compute an equivalent number
        # of probe points on each X/Y dimensions (distance between two points should be the same as in the config)
        {% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
        {% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}

        # Then, three possibilities :
        # a) Both dimensions have less than 3 probe points : the bed_mesh is not needed as it's a small print (if not forced).
        # b) If one of the dimension is less than 3 and the other is greater. The print looks to be elongated and
        #    need the adaptive bed_mesh : we add probing points to the small direction to reach 3 and be able to do it.
        # c) If both direction are greater than 3, we need the adaptive bed_mesh and it's ok.
        # At the end we control (according to Klipper bed_mesh method: "_verify_algorithm") that the computed probe_count is
        # valid according to the choosen algorithm or change it if needed.
        {% if xProbeCnt < 3 and yProbeCnt < 3 %}
            {% if force_mesh %}
                RESPOND MSG="Bed mesh forced (small part detected): meshing 3x3..."
                {% set xProbeCnt = 3 %}
                {% set yProbeCnt = 3 %}
                {% set rRefIndex = 4 %}
                {% set algo = "lagrange" %}
                {% set xCenter = xMin + ((xMax - xMin) / 2) %}
                {% set yCenter = yMin + ((yMax - yMin) / 2) %}
                {% set mesh_min = "%d,%d"|format(xMin, yMin) %}
                {% set mesh_max = "%d,%d"|format(xMax, yMax) %}
                {% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
                {% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
                RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
            {% else %}
                RESPOND MSG="Computed mesh parameters: none, bed mesh not needed for very small parts"
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}
                {% set xCenter = xMin + ((xMax - xMin) / 2) %}
                {% set yCenter = yMin + ((yMax - yMin) / 2) %}
                {% set mesh_center = "%d,%d"|format(xCenter, yCenter) %} # we still compute the mesh center for those using klipper_z_calibration
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
            {% endif %}
        {% else %}
            {% set xProbeCnt = [3, xProbeCnt]|max %}
            {% set yProbeCnt = [3, yProbeCnt]|max %}

            # We verify that the number of probe points on each axis is odd or add one to it
            # This is very important to have a relative_reference_index point at the center of the mesh !
            {% if xProbeCnt % 2 == 0 %}
                {% set xProbeCnt = xProbeCnt + 1 %}
            {% endif %}
            {% if yProbeCnt % 2 == 0 %}
                {% set yProbeCnt = yProbeCnt + 1 %}
            {% endif %}

            # Check of the probe points and interpolation algorithms according to Klipper code
            {% if xMeshPPS != 0 or yMeshPPS != 0 %}
                {% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
                {% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
                {% if algo == "lagrange" and probeCntMax > 6 %}
                    # Lagrange interpolation tends to oscillate when using more than 6 samples: swith to bicubic
                    {% set algo = "bicubic" %}
                {% endif %}
                {% if algo == "bicubic" and probeCntMin < 4 %}
                    {% if probeCntMax > 6 %}
                        # Impossible case: need to add probe point on the small axis to be >= 4 (we want 5 to keep it odd)
                        {% if xProbeCnt > yProbeCnt %}
                            {% set yProbeCnt = 5 %}
                        {% else %}
                            {% set xProbeCnt = 5 %}
                        {% endif %}
                    {% else %}
                        # In this case bicubic is not adapted (less than 4 points): switch to lagrange
                        {% set algo = "lagrange" %}
                    {% endif %}
                {% endif %}
            {% endif %}

            # 5 ----- COMPUTE THE RELATIVE_REFERENCE_INDEX POINT --------------------
            {% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}
            {% set xCenter = xMin + ((xMax - xMin) / 2) %}
            {% set yCenter = yMin + ((yMax - yMin) / 2) %}

            # 6 ----- FORMAT THE PARAMETERS AND SAVE THEM ---------------------------
            {% set mesh_min = "%d,%d"|format(xMin, yMin) %}
            {% set mesh_max = "%d,%d"|format(xMax, yMax) %}
            {% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
            {% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
            RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
        SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}

        {% set xCenter = xMinConf + ((xMaxConf - xMinConf) / 2) %}
        {% set yCenter = yMinConf + ((yMaxConf - yMinConf) / 2) %}
        {% set mesh_center = "%d,%d"|format(xCenter, yCenter) %} # we still compute the mesh center for those using klipper_z_calibration
        SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
    {% endif %}

    # Finaly save in the variables that we already computed the values
    SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}


[gcode_macro ADAPTIVE_BED_MESH]
description: Perform a bed mesh, but only where and when it's needed
gcode:
    {% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home printer first!") }
    {% endif %}

    # If the parameters where computed, we can do the mesh by calling the _DO_ADAPTIVE_MESH
    {% if ready %}
        _DO_ADAPTIVE_MESH

    # If the parameters where not computed prior to the ADAPTIVE_BED_MESH call, we call the COMPUTE_MESH_PARAMETERS
    # macro first and then call the _DO_ADAPTIVE_MESH macro after it
    {% else %}
        RESPOND MSG="Adaptive bed mesh: parameters not already computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
        COMPUTE_MESH_PARAMETERS {rawparams}
        M400 # mandatory to flush the gcode buffer and be sure to use the last computed parameters
        _DO_ADAPTIVE_MESH
    {% endif %}


[gcode_macro _DO_ADAPTIVE_MESH]
gcode:
    # 1 ----- POPULATE BEDMESH PARAMS FROM SAVED VARIABLES ----------------------
    {% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
    {% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
    {% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
    {% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
    {% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
    {% set rRefIndex = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].rri %}
    {% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}

    # 2 --------- ADAPTIVE_BED_MESH LOGIC --------------------------------------

    # If it's necessary to do a mesh
    {% if do_mesh %}
        # If it's a standard bed_mesh to be done
        {% if do_nominal %}
            RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
            BED_MESH_CALIBRATE
        {% else %}
            {% if printer["configfile"].config["bed_mesh"]["relative_reference_index"] is defined %}
                RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
                BED_MESH_CALIBRATE MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
            {% else %}
                RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}"
                BED_MESH_CALIBRATE MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}
            {% endif %}
        {% endif %}
    {% else %}
        RESPOND MSG="Adaptive bed mesh: no mesh to be done"
    {% endif %}

    # Set back the 'ready' parameter to false
    SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}

# --------------------------- Start Print ----------------------------
[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
    M220 S100 ; reset feedrate
    # Home the printer
    RESPOND MSG="Parameters"
    RESPOND MSG="{params.BED_TEMP}"
    RESPOND MSG="{params.SIZE}"
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
       RESPOND MSG="{params.SIZE} is good"
    {% endif %}
    RESPOND MSG="Homing and Z tilt adjust"
    G32
    G28 Z
    # Follow Octoprint MAR
    # G91 Do I need this 
    # Reset the G-Code Z offset (adjust Z offset if needed)
    # SET_GCODE_OFFSET Z=0.0 MAR
    # Move the nozzle near the bed
    # G1 Z5 F3000
    # Move the nozzle very close to the bed
    # G1 Z0.15 F300
    # Wait for bed to reach temperature
    RESPOND MSG="Waiting for bed temp"
    M190 S{BED_TEMP}
    #ADAPTIVE_BED_MESH SIZE={FL_SIZE}
    # Removed 4/12/25 by MAR - Using built in, which is below
    BED_MESH_CALIBRATE ADAPTIVE=1
    # Set and wait for nozzle to reach temperature
    RESPOND MSG="Waiting for nozzle temp"
    M109 S{EXTRUDER_TEMP}
    # Bed Mesh
    # ADAPTIVE_BED_MESH
    # BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    # the rest of your start macro here
    # Reset Extruder
    G92 E0
    # Move Z Axis up
    G1 Z3.0 F3000
    # Move to start position
    G1 X0.1 Y20 Z0.3 F5000.0
    # Draw the first line
    G1 X0.1 Y200.0 Z0.3 F1500.0 E15
    # Move to side a little
    G1 X0.4 Y200.0 Z0.3 F5000.0
    # Draw the second line
    G1 X0.4 Y20 Z0.3 F1500.0 E30
    # Reset Extruder
    G92 E0
    # Move Z Axis up
    G1 X5 Y20 Z3.0 F3000
# --------------------------------------------------------------------

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E5 F100 # purge
    G1 E-20 F100 # Unload
    G1 E-150 F600 # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E100 F100 # load
    G1 E20 F50 # Load
    RESTORE_GCODE_STATE NAME=unload_state

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

# ---------------------------- End Print -----------------------------
[gcode_macro END_PRINT]
variable_machine_depth: 235
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Relative positionning
    G91
    # Retract and raise Z
    G1 Z0.2 E-2 F2400
    # Wipe out
    G1 X5 Y5 F3000
    # Raise Z more
    G1 Z10
    # Home XY
    G28 X Y
    # Set Absolute
    G90
    # Disable steppers
    M84
# --------------------------------------------------------------------


########################################
# TMC2208 configuration
########################################

#[tmc2208 stepper_x]
#uart_pin: P1.10
#run_current: 0.800
#hold_current: 0.500
#stealthchop_threshold: 999999
#
#[tmc2208 stepper_y]
#uart_pin: P1.9
#run_current: 0.800
#hold_current: 0.500
#stealthchop_threshold: 999999
#
#[tmc2208 stepper_z]
#uart_pin: P1.8
#run_current: 0.650
#hold_current: 0.450
#stealthchop_threshold: 999999
#
#[tmc2208 extruder]
#uart_pin: P1.4
#run_current: 0.800
#hold_current: 0.500
#stealthchop_threshold: 999999
#
#[tmc2208 extruder1]
#uart_pin: P1.1
#run_current: 0.800
#hold_current: 0.500
#stealthchop_threshold: 999999


########################################
# TMC2130 configuration
########################################

#[tmc2130 stepper_x]
#cs_pin: P1.10
#spi_software_miso_pin: P0.5
#spi_software_mosi_pin: P1.17
#spi_software_sclk_pin: P0.4
#run_current: 0.800
#hold_current: 0.500
#stealthchop_threshold: 999999
#diag1_pin: P1.29

#[tmc2130 stepper_y]
#cs_pin: P1.9
#spi_software_miso_pin: P0.5
#spi_software_mosi_pin: P1.17
#spi_software_sclk_pin: P0.4
#run_current: 0.800
#hold_current: 0.500
#stealthchop_threshold: 999999
#diag1_pin: P1.28

#[tmc2130 stepper_z]
#cs_pin: P1.8
#spi_software_miso_pin: P0.5
#spi_software_mosi_pin: P1.17
#spi_software_sclk_pin: P0.4
#run_current: 0.650
#hold_current: 0.450
#stealthchop_threshold: 999999
#diag1_pin: P1.27

#[tmc2130 extruder]
#cs_pin: P1.4
#spi_software_miso_pin: P0.5
#spi_software_mosi_pin: P1.17
#spi_software_sclk_pin: P0.4
#run_current: 0.800
#hold_current: 0.500
#stealthchop_threshold: 999999
#diag1_pin: P1.26

#[tmc2130 extruder1]
#cs_pin: P1.1
#spi_software_miso_pin: P0.5
#spi_software_mosi_pin: P1.17
#spi_software_sclk_pin: P0.4
#run_current: 0.800
#hold_current: 0.500
#stealthchop_threshold: 999999
#diag1_pin: P1.25


########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,
    EXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,
    EXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "ssp0"

# See the sample-lcd.cfg file for definitions of common LCD displays.

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 65.797
#*# pid_ki = 1.290
#*# pid_kd = 838.914
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 31.710
#*# pid_ki = 2.093
#*# pid_kd = 120.100
#*#
#*# [bltouch]
#*# z_offset = 3.390
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.100000, 0.015000, -0.007500, 0.007500, 0.070000
#*# 	  0.087500, 0.002500, -0.010000, 0.022500, 0.077500
#*# 	  0.080000, 0.002500, 0.005000, 0.012500, 0.072500
#*# 	  0.107500, 0.020000, 0.015000, 0.017500, 0.080000
#*# 	  0.100000, 0.007500, -0.022500, -0.032500, 0.045000
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 20.0
#*# max_x = 290.0
#*# min_y = 20.0
#*# max_y = 290.0
